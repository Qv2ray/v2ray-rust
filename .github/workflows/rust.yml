name: Rust

on:
  push:
    branches: 
      - 'main'
      - 'dev'
    paths-ignore: 
      -'README.md'
      -'LICENSE'
      
  pull_request:
    branches: 
      -'main' 
      -'dev' 
    paths-ignore: 
      -'README.md'
      -'LICENSE'
      
  release:
    types: 
      -'prereleased' 
      -'published' 
      -'released'
      
  # For test
  workflow_dispatch:

jobs:
  build:
    env:
      CARGO_TERM_COLOR: always
    name: '${{ matrix.config.name }}'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows-x86_64", artifact: "Windows-x86_64",
            has_release: true,
            target_triple: x86_64-pc-windows
          }
        - {
            name: "Linux", artifact: "Linux-x86_64",
            has_release: true,
            target_triple: x86_64-unknown-linux
          }
        - {
            name: "macOS-x64", artifact: "macOS-x64",
            has_release: true,
            target_triple: x86_64-apple-darwin
          }
        - {
            name: "macOS-arm64", artifact: "macOS-arm64",
            has_release: true,
            target_triple: aarch64-apple-darwin
          }
          
    steps:
    - uses: actions/checkout@v2
    
    - name: Install protoc
      uses: arduino/setup-protoc@v1.1.2
    
    - name: Install musl
      run: sudo apt install musl-tools
          
    - name: Install latest nightly
      uses: actions-rs/toolchain@v1
      with:
            toolchain: nightly
            override: true
            components: rustfmt, clippy
      # `cargo check` command here will use installed `nightly`
      # as it is set as an "override" for current directory
      
    - name: Run cargo check
      uses: actions-rs/cargo@v1
      with:
        command: check    
            
    - name: Install targer
      run: rustup target add ${{matrix.config.target_triple}}-musl
        
    - name: Build
      run: |
        mkdir build_assets
        cargo build --verbose --release --target=${{matrix.config.target_triple}}-musl --target-dir build_assets
      
    - name: Run tests
      run: |
        mkdir build_assets_tests
        cargo test --verbose --target=${{matrix.config.target_triple}}-musl --target-dir build_assets_tests
    
    - name: Generate 7zip
      run: 7z a v2ray-rust.7z -- ./build_assets/${{matrix.config.target_triple}}/release/*
    
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: v2ray-rust-${{ github.sha }}-${{ matrix.config.artifact }}.7z
        path: v2ray-rust.7z
        
    - name: Get the version
      if: github.event_name == 'release' && matrix.config.has_release
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
    
    - name: Upload to GitHub Release
      uses: svenstaro/upload-release-action@v2
      if: github.event_name == 'release' && matrix.config.has_release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: v2ray-rust.7z
        asset_name: v2ray-rust-${{ steps.get_version.outputs.VERSION }}-${{ matrix.config.artifact }}.7z
        tag: ${{ github.ref }}
        overwrite: true
